"""
Django settings for SOD project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
CORE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'tempkey'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.accounts',
    'apps.sod',
    'apps.demo',
    'apps.esite',
    'apps.home'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATE_DIR = os.path.join(CORE_DIR, "templates")  # ROOT dir for templates
print("templates directory path is :"+str(TEMPLATE_DIR))

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\

DB_PASSWORD = os.getenv('DB_PASSWORD')


DATABASES = {
    'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'sod', 
            'USER': 'postgres', 
            'PASSWORD': 181200,
            'HOST': '127.0.0.1', 
            'PORT': '5432',
        },
}



# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# SECURE SESSION COOKIES

# settings.py

# Ensure the session cookie is only sent over HTTPS
# ALWAYS SET IT TO TRUE IN PRODUCTION
SESSION_COOKIE_SECURE = True

# Prevent client-side JavaScript from accessing the session cookie
SESSION_COOKIE_HTTPONLY = True

# Set SESSION_COOKIE_AGE to the desired duration in seconds.
# For example, 1209600 seconds (2 weeks).
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_ROOT = os.path.join(CORE_DIR, 'static')

STATIC_URL = 'static/'

# Extra places for collectstatic to find static files. - source directory for static files
STATICFILES_DIRS = (
    os.path.join(CORE_DIR, 'frontend/public'),
)

print("core directory path is :"+str(CORE_DIR))

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging Settings
import logging
from logging.handlers import TimedRotatingFileHandler

# Get the environment variable value
ENV = os.getenv('SOD_ENV')
print("SOD_ENV is : "+ENV)
# Set the logging level based on the environment
if ENV == 'dev':
    LOG_LEVEL = 'WARNING'
    #LOG_LEVEL = 'INFO'
elif ENV == 'qa':
    LOG_LEVEL = 'INFO'
elif ENV == 'prod':
    LOG_LEVEL = 'WARNING'
elif ENV == 'uat':
    LOG_LEVEL = 'WARNING'
else:
    LOG_LEVEL = 'DEBUG'

LOGGER_ROOT = os.path.join(CORE_DIR, 'logs/sod-server.log')
print("Logger root is : "+ LOGGER_ROOT)
print("Loading log level : "+LOG_LEVEL + " as per env : "+ENV)
LOGGING = {
    'formatters': {
    'verbose': {
        'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s',
        'datefmt': '%Y-%m-%d %H:%M:%S',
    },
    },
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': LOGGER_ROOT,
            'when': 'midnight',
            'interval': 1,
            'backupCount': 366,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
    },
}
